1，Servlet规范的三大组件：Servlet、Listener、Filter

2,Filter的作用：拦截以及过滤request和response。

3，Filter的生命周期：
	Filter是在应用启动时被创建和初始化的，每次请求都不会创建新的Filter(单例多线程的)。
	Filter是在应用停止时销毁的。
	doFilter()方法无论哪个线程访问，只要由该Filter进行过滤，那么就会执行该Filter的doFilter()方法。
	并且每过滤一次就会执行一次doFilter()方法。

	注意：由于Filter是单例多线程的，为了保证其线程安全性，一般是不为Filter添加可修改的成员变量。


4，若Filter为全路径匹配方式,那么url-pattern只能为/*，而不能写为/，即写为"/"就都不能拦截了，这一点与Servlet不同的是,Servlet仅仅不拦截jsp。

5.  filter-mapping中可以不使用url-pattern,但需要指定servlet-name，即当前过滤器拦截的是指定Servlet的请求。	
	<filter-mapping>
		<filter-name>Some-Filter</filter-name>
		<!-- 
			若Filter为全路径匹配方式,那么url-pattern只能为/*，而不能写为/
		 -->
		<!-- <url-pattern>/*</url-pattern> -->
		<!--filter-mapping中可以不使用url-pattern,但需要指定servlet-name，即当前过滤器拦截的是指定Servlet的请求  -->
		<servlet-name>SomeServlet</servlet-name>
	</filter-mapping>

	<servlet>
		<description></description>
		<display-name>SomeServlet</display-name>
		<servlet-name>SomeServlet</servlet-name>
		<servlet-class>com.bjpowernode.servlets.SomeServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>SomeServlet</servlet-name>
		<url-pattern>/someServlet</url-pattern>
	</servlet-mapping>


6，dispatcher标签的四个取值(该标签在web.xml文件注册过滤器中)：详情见04-dispatcher项目
	<dispatcher>FORWARD</dispatcher> ,就会拦截掉request.getRequestDispatcher("/otherServlet").forward(request, response);，其他则不会被拦截。
	<dispatcher>INCLUDE</dispatcher>，会拦截掉request.getRequestDispatcher("/otherServlet").include(request, response);其他不会被拦截
	<dispatcher>REQUEST</dispatcher>,拦截的就是普通请求，写与不写都一样，即为默认值。
	<dispatcher>ERROR</dispatcher>,发生404时不会拦截，普通请求即使发生404也会被拦截,常常配合下面的<error-page>使用，跳转到该错误页面就会被拦截。

	当发生错误时，我们在web.xml文件中设置
	<error-page>
  	<error-code>404</error-code>
  	<location>/error.jsp</location> //当发生该错误时，跳转到该页面
	</error-page>

7，Servlet的输出流PrintWriter out = response.getWriter();不需手动关闭，当响应结束时就会自动关闭。

8，当应用中存在多个Filter时，其执行顺序与其注册顺序一致（详见07-filterOrder项目）

9，Filter与Servlet的区别：
	Filter是在应用启动时被创建和初始化的，而Servlet是在服务器启动后访问该servlet的时候才调用init()实例化的,


10，!--Filter执行原理：
   	   一个数组与一个Map：
   	 (1)一个Map：Map的key为<url-pattern>的值，value为 Filter实例对象的引用(Filter在一启动应用时会创建实例，所有其必有一个实例对象的引用。故不像
   	   Servlet那样需要2个Map，只需要一个即可。)
   	 (2)一个数组：存放着与请求相匹配的所有Filter。
   	 执行原理：
   	 当对某资源的请求到达Web容器时，会先对请求进行解析，使用解析出的URI作为比较对象，从Map中查找是否存在相匹配的key。若存在，那么读取其value，即Filter
   	 对象的引用，将该引用存放到数组中。然后继续向后查找，直到将该Map查找完毕(查找所有注册的Filter)。这样数组中就会存在按照查找顺序排好序的Filter引用。
   	 数组初始化完毕(所有的Filter引用都放到数组中了)后，开始按照数组元素顺序进行执行，所有数组中的Filter全部执行完毕后，在跳转到请求的目标资源。


11，装饰者设计模式：
	装饰者设计模式的实现有两个要求：
	(1) 装饰者类与目标类要实现相同的接口，或继承自相同的抽象类。
	(2) 装饰者类中要有目标类的引用作为成员变量，而具体的赋值一般通过带参构造器完成。

	装饰者的基类
	要求1：要有无参构造器
	要求2：不对目标类的目标方法做任何增强


12,静态代理模式与装饰者模式的比较：
	共同点：
	1,都要实现与目标类相同的业务接口。
	2，都要声明目标对象
	3，都可以在不修改目标类的前提下，增强目标方法。
	
	区别：
	1，目的不同：
	装饰者的使用目的：就是增强目标对象。
	静态代理模式的目的：保护和隐藏目标对象(在测试类中无法看到目标对象)
	2，对于目标对象的获取方式不同：
	装饰类中目标对象的获取：通过带参构造器传入
	静态代理模式中目标对象的获取：在构造器中直接创建(new出来)。

	3，功能增强的实现者不同：
	装饰者设计模式中存在装饰者基类，其并不真正实现增强，而是由具体的装饰者进行功能的增强，所以存在一个“装饰链”的概念。
	静态代理设计模式中一般不存在父子类的关系，具体的增强就是由代理类完成，无需其子类完成，所以不存在“链”的概念。


13，在Filter中解决中文乱码问题：

    GET请求方式中文乱码问题：
	参见11-charactorEncoding-get项目
    
    POST请求方式中文乱码问题：

	在Filter中写入request.setCharacterEncoding("UTF-8");即可。
	
	小问题：Tomcat7与Tomcat9对于Filter的方法默认实现不一样，Tomcat9默认实现了init()、destroy()方法，故我们所实现Filter接口的类里边只实现doFilter即可。
		而Tomcat7对于三个方法都没有实现，故我们三个方法都要重写，否则会报错。

    Set转换成Enumeration类型：
    public Enumeration<String> getParameterNames() {
	Map<String, String[]> map = this.getParameterMap();
	Set<String> keySet = map.keySet();
	Vector keyVector = (Vector) keySet;
	return keyVector.elements();
    }




