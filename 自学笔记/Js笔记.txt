1，this用法：
	function Person(){
		this.name = "张三"; //带有this表示这个属性是公开的
		this.age = 20;
	}

	window.alert(window.v); <==>window.alert(v);



2，成员函数的用法：(成员函数可以没有返回值，有也只能有一个。)
	(1) function Person(){
		this.name="abc";
		this.age=900;
		this.abc=function(v1,v2){
			window.alert(this.name+" "+this.age+" "+v1+" "+v2);
		}
	    }
		var p1=new Person();
		p1.abc(); //abc 900 undefined undefined
		p1.name="中国";  //这里可以修改掉name的值为“北京”
		p1.abc("北京","天津"); //中国 900 北京 天津


	(2) function Person(){
		this.name="abc";
		this.age=900;
		this.abc=function(v1,v2){
			window.alert(this.name+" "+this.age+" "+v1+" "+v2);
			}
	     }
		
		var p2=new Person();
		p2.abc();//abc 900 undefined undefined
		p2.abc("南京","东京");//abc 900 南京 东京
		window.alert(p1.abc); //打印的是function代码块
		window.alert(p2.abc); ////打印的是function代码块
		window.alert(p1.abc==p2.abc); //false 说明判断的是地址

	
	(3) function Person(){
			this.name="小明";
			this.age=900;
		}
		
		function show1(){
			window.alert("hello"+this.name);
		}
		var p3 = new Person();
		//把show1函数，给p1.abc
		p3.abc=show1;
		p3.abc(); //调用
		show1(); //hello
		window.alert(p3.abc); //打出show1函数整个代码
		window.alert(show1); //打出show1函数整个代码


3，数组：
	js数组是引用类型，数组名是一个地址，指向堆内存中的数据。


4,Object类：Object类是所有javascript类的基类，提供了一种创建自定义对象的简单方式，不需要程序员再定义构造函数。

	Array.prototype.find=function(val){
			//var temp;
			for(var i=0;i<this.length;i++){   //这里使用的是this而不是arr1！！！
				if(val==this[i]){
					return i;
				}
			}
		return -1;
		}
		
		window.alert("Thomas的下标为"+arr1.find("Thomas"));



5，全局函数：不在一个类里的函数

	
		function test(a){
			window.alert(a);
		}

		
		function test(a,b){
			window.alert(a+" "+b);
		}
		test(23);//23 undefined  注意：JavaScript函数不支持重载，选的函数是最下面的一个(覆盖)



6，可变参数：
	function abc(){
		var s=0;
			for(var i=0;i<arguments.length;i++){
				s += arguments[i];
		}
		return s;
	  }
	  window.alert(abc(1,2)); //3
	  window.alert(abc(7,8,9)); //24


 7，构造函数:
	在给一个对象初始化属性值的时候，也可以指定函数属性
	案例：function jiSuan (num1,num2,oper){
				if(oper=="+"){
					return num1+num2;
				}else if(oper=="-"){
					return num1-num2;
				}else if(oper=="*"){
					return num1*num2;
				}else{
					num1/num2;
				}
			}

			function Person(name,age,fun){
				this.name=name;
				this.age=age;
				this.fun=fun;
			}

			var p1=new Person("aa",25,jiSuan);
			window.alert(p1.name);//aa
			window.alert(p1.fun(25,24,"+"));//49
	
8，创建对象的又一种形式：
	如果一个对象比较简单，我们可以直接创建
	var dog={name:'小狗',age:8,fun1:function(){window.alert("hello world")},
	fun2:function(){window.alert("okok")}};
	window.alert(dog.name+" "+dog.age); //小狗 8
	window.alert(dog.constructor); //function Object() {[native code]}
	dog.fun1(); //hello world
	dog.fun2(); //okok


	练习：
	var dog={name:"hello"};
	function test(){
	window.alert(this.name);
	}
	test(); //null
	window.test();//null
	test.call(dog); //hello 相当于去调用test(),同时this执行dog对象  这里call是调用的意思 <==>dog.test(); 把this修改成dog
	new test(); //undefined


	for...in循环
	var dog={name:"小明",sayHello:function(a,b){window.alert("结果="+(a+b))}};

	//循环列出dog对象的所有属性和方法 对象名['属性名']
	for(var key in dog){    //key代表的是属性
		window.alert(dog[key]);
	}

	//循环列出window对象的所有属性和方法
	for(var key in window){
		document.write(key+":"+window[key]+"<br/>");
	}


9，继承：
	function Stu(name,age){
		this.name=name;
		this.age=age;
		this.show=function(){
			window.alert(this.name+" "+this.age);
		}
	}

	function MidStu(name,age){
		this.stu=Stu; //将Stu所有的属性方法教给stu
		this.stu(name,age); //js中实际上是通过对象冒充，来实现继承。这句代码不能少(因为js是动态语言，如果不执行，则不能实现继承效果,这句代码的意思是执行stu)
	}
			
		function Pupil(name,age){
			this.stu=Stu;
			this.stu(name,age);
		}
			

	var midStu=new MidStu("顺平",20);
	midStu.show(); //顺平 20
	
	特别说明：通过对象冒充js可以实现多重继承的效果（用的很少）


10，js内部类
	javascript中本身有提供一些，可以直接使用的类，这种类就是内部类，主要有：
	Object/Array/Math/Boolean/String/RegExp/Date/Number

	内部类的分类：动态类、静态类

	静态类的使用：类名.属性|方法
	动态类的使用：var 对象=new 类名  对象.属性|方法
	简单说就是静态类可以直接调用方法，动态类要new对象后，通过对象调用方法。

	Math类(静态类)常用方法：
	abs(x)		返回数的绝对值
	ceil(x)		对一个数进行上舍入	alert(Math.ceil(4.5)); //5
	floor(x)	对一个数进行下舍入	alert(Math.floor(4.5)); //4
	max(x,y)	求x，y中较大的数
	min(x,y)	求x，y中较小的数
	roud(x)		对x进行四舍五入
	random()	返回一个大于0小于1的16位小数位的数字

	Date类(动态类)常用方法：
	Date()		返回当前日期和时间	window.alert(new Date().toLocaleString());
	getDate()	从Date对象返回一个月中的某一天
	getDay()	从Date对象返回一周中的某一天
	getMonth()	从Date对象返回月份
	getYear()	从Date对象返回年
	getHours()	从Date对象返回小时数  返回值是 0 （午夜） 到 23 （晚上 11 点）之间的一个整数
	getMinutes()	从Date对象返回分钟
	getSeconds()	从Date对象返回秒数


	String类(动态类)常用方法：
	indexOf(searchvalue,fromindex)		返回某个字符串值在该字符串首次出现的位置
	split()			把字符串分割为字符串数组
	substr(start,length)	提取取从start下标开始的指定数目的字符
	substring(start,stop)	提取字符串中介于两个下标之间的子串
	charAt()		返回指定位置的字符
	length			属性，可以得到字符串的长度
	toString()		js中所有内部对象的成员方法
	mathch()/repalce()/search()	用的很多，涉及到正则表达式。

	indexOf(searchvalue,fromindex)：
	searchvalue:检索的字符串值
	fromindex:可选的整数参数，规定在字符串中开始检索的位置，它的合法取值范围是0~length-1，如果省略，默认从0开始检索
	返回的是searchvalue第一次出现的位置。


	Array类(动态类):
	var myarr = new Array();
	//动态的添加数据
	myarr[0] = "Tom";
	myarr[1] = 90;
	window.alert(myarr.length+" "+myarr); //2 Tom,90 数组可以直接打出来，不要循环打印。
		
		
	myarr[1]=null;
	window.alert(myarr.length+" "+myarr); //2 Tom, 没有真正删除掉
		

	myarr.pop();
	window.alert(myarr.length+" "+myarr); //1 Tom  删掉了最后一个元素

	myarr.push("abcd");
	window.alert(myarr.length+" "+myarr); // 2 Tom,abcd

	var myarr2=new Array(2);
	window.alert(myarr2.length); //2
	myarr2[0]=90;
	myarr2[1]=91;
	myarr2[2]=92;
	myarr2[80]=25; //中间会加空值
	myarr2['a']="ok";
	window.alert(myarr2['a']); //ok,但是不会增加数组长度。
	window.alert(myarr2); //90,91,92 上面的2并不会限制掉数组的大小
	window.alert(myarr2.length); //81


	Boolean类(动态类):
	var boo = new Boolean(true);
	document.write(boo.toString()); //true 把逻辑值转换成字符串
	window.alert(boo.valueOf()); //true 取的此对象的原始值


	Number类(动态类)
	var a = 890;
	document.write(a.toString()); //把Number转换成字符串	注意:如果括号里不带参数，默认是转换成10进制的字符串，如果参数是2，则转换成2进制的字符串

	toFixed(num):
	num：规定小数的位数，是0~20之间的值，包括0和20，如果省略默认为0.
	返回规定小数位的字符串(不够补0或者四舍五入)


	Js中函数分类：自定义函数、内部类或成员方法、系统函数
	自定义函数、内部类或成员方法前面已经说过

	常用的系统函数(属于Global类)：	系统函数直接写，不用"类名." 或者 "对象."调用。
	decodeURL()	解码某个编码的URL
	encodeURL()	把字符串编码为URL
	eval()		计算Javascript字符串，并把它作为脚本代码来执行
	isNaN()		检查是否是个数字
	parseInt()	解析一个字符串并返回一个浮点数
	parseFloat()

	注意：eavl() 是重点！！！

	var a=90;
	window.alert(isNaN(a)); //false



11，事件驱动
	事件的分类：鼠标事件、键盘事件、HTML事件、其他事件(页面中一些特殊对象运行过程中产生的事件，例如xmlhttprequset对象的相关事件)

	对background-color的修改是：div1.style.backgroundColor="black";

	注意：在css中比较字符串是否相等用双等号“==” ！！！

	修改外部css：
	var ocssRules = document.styleSheets[1].rules || document.styleSheets[1].cssRules;  (Mozilla和Safasi用的是cssRules,而IE中用的是rules)
	
	onclick() <input type="submit" value="登录" onclick=" return checkuser()"/>  //当onclick里的return返回一个假时就会放弃提交。
	onload()：一打开页面就触发事件
	onunload()：关闭页面就触发事件
	onfocus()：<input type="text" id="text1" onfocus="test6()"/> 点击文本框就触发事件
	onbeforeunload()：在关闭之前触发事件
	上面三个load类方法一般放在body标签中。
	onmouseup	事件会在鼠标按键被松开时发生。
	onmousemove	事件会在鼠标指针移动时发生。
	onmousedown	事件会在鼠标按键被按下时发生
	onkeydown	事件会在用户按下一个键盘按键时发生
	onmouseover	事件会在鼠标指针移动到指定的对象上时发生。
	onmouseout	事件会在鼠标指针移出指定的对象时发生
	onchange	事件会在域的内容改变时发生。
	
	oncontextmenu()：防止用户通过点击鼠标右键菜单拷贝网页内容 oncontextmenu="return false"  如果没有return false 菜单还是会弹出来的
	<body oncontextmenu="return test10()"> //如果把return去掉，点击鼠标右键时，test10()会调用，右键菜单也会弹出来。
	onselectstart()：当用户试图选中网页文字拷贝时，给提示“版权所有，禁止拷贝”


12，DOM编程(Document Object Model，文档对象模型)
	删除表格行的方法:
	mytable.deleteRow(0);括号里的数表示第几行，0表示第一行。

	//获取表格某行某列的一个元素
	window.alert(mytable.rows[0].cells[2].innerText="three");  在元素间的文本就是通过"对象.innerText"访问 例如：<td>1</td>访问1就要用innerText

	BOM(Browser Object Model，浏览器对象模型)：通过使用BOM，可移动窗口，更改状态文本。BOM是W3c组织提出的他建议所有的浏览器都应当遵循这样的设计规范，
		可以说BOM和DOM关系密切，互相影响，BOM为纲，DOM为目，DOM是BOM的具体实现。

	window对象：
	alert()		显示消息和一个确认按钮的警告框
	confirm()	显示消息以及确认按钮和取消按钮的对话
	complile()	
	setInterval()	按照指定的周期(毫秒计)来循环调用函数或计算表达式(有一个返回值,给予clearInterval(返回值)结束使用)  myTimer = setInterval("CockMove()",100);  注意myTimenr前面没有var。
	clearInterval() 取消由setInterval()设置的定时器
	setTimeout()	指定的毫秒数后调用函数或计算表达式(只调用一次)(有返回值)
	clearTimeout()	取消由setTimeout()设置的定时器

	moveTo(x,y)	把窗口的左上角移动到一个指定的坐标(相对于屏幕)	window.moveTo(100,100);
	moveBy()	可相对窗口的当前坐标把它移动指定的像素(相对于当前位置)	window.moveBy(50,50);
	resizeBy()	按照指定的像素调整窗口的大小(按照当前增加)
	resizeTo()	把窗口的大小调整到指定的宽度和高度
	open()		打开一个新的浏览器窗口或查找一个已命名的窗口(会返回一个子类窗口的引用)  window.open("newWindow.html","_self"); or window.open("newWindow.html","_blank");
	close()		关闭窗口	
	closed()	返回窗口是否已经关闭
	status		设置窗口状态栏的文本
	opener		返回对创建窗口的窗口引用(父类窗口)
	onload		页面装载
	onunload	关闭窗口

	
	History对象：History对象实际上是Javascript对象，而不是HTML DOM对象。
	back()		加载history列表中的前一个URL  等价于history.go(-1);
	forward()	加载history列表中的下一个URL  等价于history.go(1);
	go()		加载history列表中的某个具体页面


	location对象：该对象包含客服端当前的URL信息。从层次图上看，location是window对象的成员属性，但实际上location也是由jre自动创建，所以location也是一个js对象。
	assion()	加载新的文档
	reload()	重新加载当前的文档
	replace()	用新的文档替换当前文档


	navigator对象：该对象包含当前浏览器的各种信息，同上navigator就是一个js对象。
	navigator属性：
	appName		返回浏览器的名称
	browserLanguage	返回当前浏览器的语言
	platform	返回运行浏览器的操作系统平台
	systemLanguage  返回操作系统使用的默认值


	screen对象	该对象包含有关客户机显示屏幕的信息。同上js也是一个对象
	screen属性：
	colorDepth	返回目标设备或缓冲器上的调色板的比特深度。
	height		返回显示器屏幕的高的
	width		返回显示器屏幕的宽度
	availHeight	返回显示屏幕可用高度(去掉window任务栏)
	availWidth	返回显示屏幕可用的宽度

	
	event对象（见上面的事件驱动）
	关于绑定事件的细节
	(1)直接和某个html空间绑定，例如：<input type="button" value="刷新页面" onclick="test()">
	(2)通过getElementById()获取到元素后，再绑定监听：
	例如：document.getElementById("but1").onclick=test;//Hello  //这里test后面不能有括号 注意：这里要写在input按钮代码的下面,要先有input才能获取到它的对象

	(3)//实现当绑定一个按钮后，只能按一次，再次按后就没有反应(例如点击按钮投票只能投一次，再次按时不能再投票) (我的浏览器好像不能用)
	<script type="text/javascript">
	function test(){
		window.alert("你已经投了一次票");
		document.getElementById("but1").detachEvent("onclick",test);
	}

	</script>
	</head>
	<body>
		<input type="button" value="刷新页面" id="but1">
		<script type="text/javascript">
		document.getElementById("but1").attachEvent("onclick",test);
		</script>
	</body>
	
	event属性
	1,clientX	返回当事件被触发时，鼠标指针的横坐标(针对窗口)
	2,clientY	返回当事件被触发时，鼠标指针的纵坐标(针对窗口)
	3,screenX	返回当事件被触发时，鼠标指针的横坐标(针对屏幕)
	4,screenY	返回当事件被触发时，鼠标指针的横坐标(针对屏幕)
	5,altKey	返回当事件被触发时，“alt”是否被按下
	6,shiftKey	返回当事件被触发时，“shift”是否被按下
	7,keyCode	返回被按下键的unicode字符码

	event用法如下：注意传入event对象
	<head>
	<script type="text/javascript">
		function test(event){
			X=event.screenX;
			Y=event.screenY;
		}
	</script>
	</head>
	<body onmousedown="test(event)">

-----------------------------------------------------------------------------------------------------
	以上所讲的对象都不是dom对象，下面开始学习dom对象
	
	Document对象：
	Document对象代表整个html文档，可用来访问页面中的所有元素，是最复杂的一个dom对象，可以说是学好编程的关键所在。
	Document对象是Window对象的一个成员属性，通过window.document来访问，当然也可以直接使用document。
	
	DOcument对象常用的函数：
	write()		向文档写文本或html表达式或js代码
	writeln()	等同于write()方法，不同的是在每个表达式之后写一个换行符(注意：浏览器并不识别不会换行，但是代码所表达的意思就是换行。)
	open()		打开一个新文档，并删除当前文档
	close()		关闭open()文档流
	getElementById()	通过html控件的id得到该控件，如果相同的id则只取第一个
	getElementsByName()	通过html控件的名字返回对象集合
	getElementsByTagName()	通过html的标签名返回对象集合
	createElement()		创建一个指定的标签的元素[比如：动态创建超链接]

	Document对象的属性
	bgColor		当前文档背景色
	fgColoe		文档前景色
	title		当前文档的标题
	URL		当前文档的url

	创建元素：	var myElement=document.createElement("a");//写希望创建的html元素标签名，创建超链接
			myElement.href="http://www.sina.com";
			myElement.innerText="链接到新浪";
			document.body.appendChild(myElement);

	appendChild()	通过父元素添加子元素
	removeChild()	通过父元素移除某个子元素

	//通过子元素获取父元素
	window.alert(document.getElementById("id1").parentNode); //id1是自元素的id

	常用的dom的每个Node节点属性和方法：
	常用属性：
	nodeName	节点名称
	nodeValue	节点值
	nodeType	节点类型
	firstChild	第一个子节点
	lastChild	最后一个子节点
	childNodes	所有子节点
	previousSibling		前一个节点
	nextSibling	后一个节点
	ownerDocument	获得该节点所属的文档对象
	attributes	代表一个节点的属性对象
	parentNode	获取父节点
	
	关于nodeType属性的节点类型
	元素类型	节点类型

	元素		1
	属性		2
	文本		3
	注释		8
	文档		9
	
	对dom的加强
	在dom编程中，一个html文档会被当做dom树对待，dom会把所有的html元素映射
	成node节点，于是你就可以使用node节点(对象)，属性和方法。


	body对象：代表文档的主体
	body对象是document对象的一个成员属性，通过document.body来访问。

	body对象常用的函数和属性
	appendChild()
	removeChild()
	innerText	某个元素间的字体
	innerHTML	某个元素间的html代码

	body对象的两个事件
	onselectstart事件
	onscroll事件	拉动滚动条就会触发该事件

	
	window.alert(sundiv.offsetWidth); 60	  返回当前对象的实际宽度
	window.alert(sundiv.offsetHeight); //60  返回当前对象的实际高度
	window.alert(document.body.clientWidth); //1920  返回body对象的宽度
	window.alert(document.body.clientHeight); //966  返回body对象的高度


	style对象和document对象下的集合对象styleSheet有关系，表示当前元素的样式设置。每一个元素都拥有的属性
	

	forms对象(集合)：按照表单在文档中的顺序得到form象，forms对象集合中包括了当前文档的所有form对象。讲forms对象是为了引出form对象(一个是forms，一个是form)

	forms的属性
	forms	var allforms=document.forms; 返回的是表单的集合  window.alert(allforms[1].hobby1.value);

	
	关于表单的提交的响应
	<form action="" onsubmit=" return checkinfo()">等价于<input onclick="return checkinfo()" type="submit" value="注册新用户"/>
	onsubmit 事件会在表单中的确认按钮被点击时发生。

	img对象
	onabort		当用户放弃图像的装载时调用的事件句柄
	onerror		当装载图像的过程中发生错误时调用的事件句柄
	onload		当图像装载完毕时调用的事件句柄

	link对象(超链接对象的集合)

	all对象(集合):能得到当前文档的所有元素，一般在遍历文档的时候使用，在实际开发中用的并不多。


	table对象：table对象代表一个表格，在HTML文档中，<table>标签每出现一次，一个table对象就会被创建。




13，正则表达式(RegExp),正则表达式是很多语言都支持的，比如java。
	正则表达式：用某种模式去匹配一类字符串的一个公式，反应到我们的js中就是一个对象来表示。

	正则表达式的创建： 
	1，var regExp=/正则表达式/gi;  【隐式创建】 regExp是检索处理的结果，但是一个结果对应一个数组，该数组的regExp[0]就是找到的那个文本。
		gi中：g是global的简写，表示的是给定的结果是否执行全局匹配,i是ignoreCase，它声明了给定的正则表达式是否执行区分大小写的匹配
		如果i标志被设置，则该属性为true，否则为false。true就是不区分，反之。
		/pattern/[flag],flag是可以选择的，flag主要有以下几种标识符
		g(global) 全局标志
		i(ignoreCase) 忽略大小写
		m(multiline) 用作多行标志，会把换行考虑进去
	2, var regExp=new RegExp("正则表达式","gi"); 【显示创建】

	RegExp对象的方法
	exec()	检索字符串中指定的值，返回找到的值，并确定其位置  返回一个数组，其中存放匹配的结果，如果未找到匹配，则返回值为null。
	test()	检索字符串中指定的值，返回true或false

	String对象和正则表达相关的方法(String去调用该方法,括号里面是正则表达是)
	(1) match()：返回的是一个数组，把所有匹配的都给返回回来。
	var con = content.innerText;
	var myreg=/abc/gi;
	res=con.match(myreg);

	(2) replace(正则表达式,要替换成的字符串)：
	var newCon = con.replace(/(\d){4}/,"这里原来有四个数字");
	var newCon = con.replace(myreg,"这里原来有四个数字");


	则表达式对象的属性：
	index	是当前表达式模式首次匹配内容的开始位置，从0开始计数，其初始值为-1，每当成功匹配时，index属性都会随之改变。(静态属性，由RegExp调用)
	lastindex   是当前表达式模式首次匹配内容中最后一个字符的下一个位置，从0开始计数
	input	返回当前所作用的字符串
	leftContext	是当前表达式模式最后一个匹配字符串左边的所有内容
	rightContext	是当前表达式模式最后一个匹配字符串右边的所有内容
	leftContext与rightContext上面官方解释太模糊，说白了的意思就是分别取匹配字符串左边和右边的内容，例子如下
	
	例子：
	var con=content.innerText;
	var myreg=/(\d){4}/gi;
	while(res=myreg.exec(con)){
		window.alert("index="+RegExp.index+" "+RegExp.leftContext+" "+RegExp.rightContext);
	}


	//练习：在一个大的字符串中，找出所有四个数字连在一起的子串
	//要求：(1):第一位与第四位相同 (2):第二位与第三位相同
	var con=content.innerText;		
	var myreg=/(\d)(\d)\2\1/gi; 
	while(res=myreg.exec(con)){
		window.alert(res[0]);
	}
	注意：要捕获只能用()括起来，例如上面的(\d)。


	元字符:
	限定符:var myReg=/(\d){4}/gi  //{4} 就是限定符
	另外一种限定符: a{3,4} 表示的是a可以出现3次或者4次 例如：1{3,4}去匹配 1111111 输出结果是：1111 111(匹配原则是贪婪匹配，即尽可能的多匹配)
	另外一种限定符：/a+/gi 表示的是出现1次到任意多次   例如：/1+/gi去匹配 1111111 输出的结果是 1111111(贪婪匹配,全部匹配完)
	另外一种限定符：/a*/gi 表示的是出现0次到任意多次   例如  /al*/gi去匹配alll  输出的结果是 alll
	另外一种限定符：/a?/gi 表示的是出现0次到1次(匹配电子邮件会用到)       例如  /al?/gi去匹配alll  输出的结果是 al  al? ?针对的是l而言，a必须出现。
	另外一种限定符：[a-z]  表示可以匹配a-z中任意一个字符,例如/[A-Z]/gi去匹配allc8 输出的结果是 a l l c [A-Z]表示A-Z之间的英文字母，因为有i所以不区分大小写 
	另外一种限定符：[^a-z] 表示可以匹配不是a-z中任意一个字符,例如/[^a-z]{2}/gi去匹配allc8,输出的结果是 "不输出"，本来是输出8但是有{2}限制所以不输出。
	另外一种限定符：[abcd] 表示可以匹配abcd中任意一个字符。
	另外一种限定符：[^abcd] 表示可以匹配不是abcd中任意一个字符。

	\d	表示可以匹配0-9的任意一个数字，相当于[0-9]。
	\D	表示可以匹配不是0-9的任意数字，相当于[^0-9]
	\w	匹配任意英文字符，数字和下划线，相当于[a-zA-ZO-9_]
	\W	相当于[^a-zA-ZO-9_]于\w刚好相反
	\s	匹配任何空白字符(空格，制表符等)
	\S	匹配热河非空白字符，和\s刚好相反
	.	匹配出\n之外的所有字符。要找.就使用 "\."  如果没有\则表示除\n之外的所有字符
	
	转译符
	需要用到转译符号的字符有以下：
	. * + ( ) $ / \ ? [ ] ^ { }


	定位符：
	^ 符号：匹配目标字符串的开始位置  注意这种例如/^han/ a han djksd 这样是取不到的，必须是han打头。
	$ 符号：匹配目标字符串的结束位置  注意这种例如/han$/ han sdsjkdjiks han a  这样是去不到的，尾巴必须是han。

	
	选择匹配符
	var myReg=/(han|韩|含)/gi;
	while(res=myReg.exec(con)){
		window.alert(res[0]);
	}



